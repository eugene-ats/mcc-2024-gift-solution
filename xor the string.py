# len of binary string after n transformation
# = 2 + 2(2**(n-1)) - 1

MODULO = 998244353

rawInput = '''500 500
11010110000011010101000100010100010111100101111111110010101100101111100110101100001101110010111100100110011010100011010010110110010010101110000011101011001111001010100101001010110010101010010001100000100001010000010100111110011011010001010101110011101101100010100000110111001101101111010000111010000010011001011111001001011010101101101010110101011010110000011110101110001100111011010101001111011001110111011000100111101001000010100110001001001101101001010000010000011111111101001001111010001111101001
'''
rawList = rawInput.splitlines()
line1 = list(map(int, rawList[0].split()))
lenOfS = line1[0]
k = line1[1]
s = rawList[1]
sumOfBeauty = 0

def lenOfBin_after_k_t(n, k):
    ans = n + (n**k - 1)
    # print(ans)
    return ans
    
def findBeauty(f):     # typeof f is string
    beauty = 0 
    # print(len(f))
    for i in range(len(f)-1):
        if f[i] == f[i+1]:
            beauty += 1 
    # print(beauty)
    return beauty
    
def findSubString(s, length):
    subStrList = []
    for i in range(length-1):
        for L in range(2, length-i+1):
            subStrList.append(s[i:i+L])
    return subStrList
    
def transformKx(subStr, k, lenOfBin_after_k_t):
    subStrArr = list(map(int, subStr))
    for kk in range(k):
        print('length of string after 1 transformation:', lenOfBin_after_k_t(len(subStrArr), 1) )
        for x in range(0, lenOfBin_after_k_t(len(subStrArr), 1)-1, 2):  # x is the index, increment by 2
            bin1 = subStrArr[x]
            bin2 = subStrArr[x+1]
            xorBin = bin1 ^ bin2   # perform xor operation
            subStrArr.insert(x+1, int(xorBin))
    results = ''.join(map(str, subStrArr))
    return results
    
# allSubStr = findSubString(s, lenOfS)
# # print(allSubStr)
# for subStr in allSubStr:
#     print(subStr)
#     tPrime = transformKx(subStr, k, lenOfBin_after_k_t)
#     # print('t prime:',tPrime)
#     beautyNo = findBeauty(tPrime)
#     print('no. of beauty:', beautyNo)
#     print()
#     sumOfBeauty += beautyNo

# print('sum =', sumOfBeauty)
# finalAns = sumOfBeauty % MODULO
# print('final answer: ', finalAns)

############## TEST ###################
# tprime = transformKx('101',2, lenOfBin_after_k_t)
beautyNo = findBeauty
print(beautyNo)
# allSubStr = findSubString('1010', 4)
# print(allSubStr)
    
# print(findBeauty('10010111'))
# print((lenOfBin_after_k_t(2, 30)-1)%MODULO)